<document xmlns="http://cnx.rice.edu/cnxml" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:md="http://cnx.rice.edu/mdml">



<title>Using MATLAB</title>
<metadata><md:content-id>undefined</md:content-id><md:title/><md:uuid>6b9f99c1-c907-4cab-a268-15b511b2602c</md:uuid>
</metadata>
<content>
<section id="id31651512">
<title>Matlab Help</title>
<para id="id31651519">MATLAB has a great on-line help system
accessible using the help command. Typing</para>
<para id="id31653775">
<code>help &lt;function&gt;</code>
</para>
<para id="id31637228">will return text information about the chosen
function. For example to get information about the built-in
function sum type:</para>
<para id="id31652719">
<code>help sum</code>
</para>
<para id="id31652729">To list the contents of a toolbox type help
&lt;toolbox&gt;, e.g. to show all the functions of the signal
processing toolbox enter</para>
<para id="id31650409">
<code>help signal processing</code>
</para>
<para id="id31650419">If you don't know the name of the function
but a suitable keyword use the 
<code>lookfor</code> followed by a keyword string, e.g.</para>
<para id="id31826886">
<code>lookfor 'discrete fourier'</code>
</para>
<para id="id31826897">To explore the extensive help system use the
"Help menu" or try the commands 
<code>helpdesk</code> or 
<code>demo</code>.</para>
</section>
<section id="id31826933">
<title>Matrices, vectors and scalars</title>
<para id="id31826942">MATLAB uses matrices as the basic variable
type. Scalars and vectors are special cases of matrices having size 1x1,
1xN or Nx1. In MATLAB, there are a few conventions for entering data:</para>


<list list-type="bulleted" id="id31796448"><item>Elements of a row are separated with blanks or commas.</item>
<item>Each row is ended by a semicolon, ;.</item>
<item>A list of elements must be surrounded by square brackets, [
]</item>
</list>
<example id="example1"><para id="element-480">It is easy to create basic variables.</para>
	<para id="exa1p1"><code>x = 1</code> (scalar)</para>
	<para id="exa1p2"><code>y = [2 4 6 8 10]</code> (row vector)</para>
	<para id="exa1p3"><code>z = [2; 4; 6; 8; 10]</code> (column vector)</para>
	<para id="exa1p4"><code>A = [4 3 2 1 0; 1 3 5 7 9]</code> (2 x 5 matrix)</para>
</example>




<para id="id31796532">Regularly spaced values of a vector can be
entered using the following compact notation</para>

<para id="id31796546">
<code>start:skip:end</code>
</para>

<example id="element-38">
	<para id="example2p1">A more compact way of entering
		variables than in <link target-id="example1">Example 1</link> is shown here:</para>
	<para id="example2p2"><code>y= 2 : 2 : 10</code></para>
	<para id="example2p3"><code>A=[4:-1:0;1:2:9]</code></para>

</example>


<para id="id31833476">If the skip is omitted it will be set to 1,
i.e., the following are equivalent</para>
<para id="id31833482">
<code>start:1:end</code> and 
<code>start:end</code></para>
<para id="id31833498">To create a string use the single quotation
mark " ' ", e.g. by entering <code>x = 'This is a string'</code>.</para>
</section>
<section id="id31833524">
<title>Indexing matrices and vectors</title>
<para id="id31833534">Indexing variables is straightforward. Given
a matrix M the element in the i'th row, j'th column is given by
<code>M(i,j)</code>. For a vector v the i'th element is given by <code>v(i)</code>. Note that
the lowest allowed index in MATLAB is 1. This is in contrast with
many other programming languages (e.g. JAVA and C), as well as the
common notation used in signal processing, where indexing starts at
0. The colon operator is also of great help when accessing specific
parts of matrices and vectors, as shown below.</para>

<example id="example3"><para id="example3p1">This example shows the use of the colon operator for
indexing matrices and vectors.</para>
<para id="id31833602"><code>A(1,:)</code> returns the first row of the matrix A.</para>
<para id="id31833607"><code>A(:,3)</code> returns the third column of the matrix A.</para>
<para id="id31833612"><code>A(2,1:5)</code> returns the first five elements of the second row.</para>
<para id="id31833617"><code>x(1:2:10)</code> returns the first five odd-indexed elements of the vector x.</para>
</example>
</section>

<section id="id31833631">
<title>Basic operations</title>
<para id="id31833641">MATLAB has built-in functions for a number of
arithmetic operations and functions. Most of them are
straightforward to use. The <link target-id="commonMat">Table</link> below lists the some commonly used
functions. Let x and y be scalars, M and N matrices.

  
	<table frame="all" id="commonMat" summary="">
	  <title>Common mathematical operations in MATLAB</title>
	  <tgroup cols="2" align="left" colsep="1" rowsep="1">
	    <colspec colnum="2" colname="c2"/>
	    <colspec colnum="4" colname="c4"/>
	    <thead valign="top">
	      <row>
	        <entry align="center"/>
	        <entry align="center">MATLAB</entry>
	      </row>
	    </thead>
	    <tbody valign="top">
	      <row>
	        <entry align="center"><m:math><m:apply><m:times/><m:ci>x</m:ci><m:ci>y</m:ci></m:apply></m:math></entry>
	        <entry align="center"><code>x*y</code></entry>
	      </row>
	      <row>
	        <entry align="center"><m:math><m:apply><m:power/><m:ci>x</m:ci><m:ci>y</m:ci></m:apply></m:math></entry>
	        <entry align="center"><code>x^y</code></entry>
	      </row>
				<row>	
	        <entry align="center"><m:math><m:apply><m:power/><m:ci>e</m:ci><m:ci>x</m:ci></m:apply></m:math></entry>
	        <entry align="center"><code>exp(x)</code></entry>
	      </row>
	      <row>
	        <entry align="center">log(<m:math><m:ci>x</m:ci></m:math>)</entry>
	        <entry align="center"><code>log10(x)</code></entry>
	      </row>
	      <row>
	        <entry align="center">ln(<m:math><m:ci>x</m:ci></m:math>)</entry>
	        <entry align="center"><code>log(x)</code></entry>
	      </row>
	      <row>
	        <entry align="center">log2(<m:math><m:ci>x</m:ci></m:math>)</entry>
	        <entry align="center"><code>log2(x)</code></entry>
	      </row>
	      <row>
	        <entry align="center"><m:math><m:apply><m:times/><m:ci>M</m:ci><m:ci>N</m:ci></m:apply></m:math></entry>
	        <entry align="center"><code>M*N</code></entry>
	      </row>
	      <row>
	        <entry align="center"><m:math><m:apply><m:power/><m:ci>M</m:ci><m:cn>-1</m:cn></m:apply></m:math></entry>
	        <entry align="center"><code>inv(M)</code></entry>
	      </row>
	      <row>
	        <entry align="center"><m:math><m:apply><m:power/><m:ci>M</m:ci><m:ci>T</m:ci></m:apply></m:math></entry>
	        <entry align="center"><code>M'</code></entry>
	      </row>
	      <row>
	        <entry align="center">det(<m:math><m:ci>M</m:ci></m:math>)</entry>
	        <entry align="center"><code>det(M)</code></entry>
	      </row>
	   </tbody>
	   </tgroup>
	  </table>
</para>

<list list-type="bulleted" id="id31833700">
<item>Dimensions - MATLAB functions length and size are used to
find the dimensions of vectors and matrices, respectively.</item>
<item>Elementwise operations - If an arithmetic operation should be
done on each component in a vector (or matrix), rather than on the
vector (matrix) itself, then the operator should be preceded by
".", e.g .*, .^ and ./.</item>
</list>

<example id="example4">
<para id="example4p1">Elementwise operations, part I</para>
<para id="example4p2">
	Let <m:math>
				<m:apply>
					<m:eq/>
					<m:ci>A</m:ci>
					<m:matrix>
     				<m:matrixrow>
	          	<m:cn> 1 </m:cn>
  	        	<m:cn> 1 </m:cn>
    	      </m:matrixrow>
      	    <m:matrixrow>
        	  	<m:cn> 1 </m:cn>
          		<m:cn> 1 </m:cn>
          	</m:matrixrow>
     			</m:matrix>
     			</m:apply>
			</m:math>. 
Then <code>A^2</code> will return
			<m:math>
				<m:apply>
					<m:eq/>
					<m:ci>AA</m:ci>
					<m:matrix>
     				<m:matrixrow>
	          	<m:cn> 2 </m:cn>
  	        	<m:cn> 2 </m:cn>
    	      </m:matrixrow>
      	    <m:matrixrow>
        	  	<m:cn> 2 </m:cn>
          		<m:cn> 2 </m:cn>
          	</m:matrixrow>
     			</m:matrix>
     			</m:apply>
     		</m:math>,
while <code>A.^2</code> will return
<m:math>
				<m:apply>
					<m:eq/>
					<m:matrix>
     				<m:matrixrow>
	          	<m:apply><m:power/><m:cn>1</m:cn><m:cn>2</m:cn></m:apply>
  	        	<m:apply><m:power/><m:cn>1</m:cn><m:cn>2</m:cn></m:apply>
    	      </m:matrixrow>
      	    <m:matrixrow>
        	  	<m:apply><m:power/><m:cn>1</m:cn><m:cn>2</m:cn></m:apply>
          		<m:apply><m:power/><m:cn>1</m:cn><m:cn>2</m:cn></m:apply>
          	</m:matrixrow>
     			</m:matrix>
     			<m:matrix>
     				<m:matrixrow>
	          	<m:cn> 1 </m:cn>
  	        	<m:cn> 1 </m:cn>
    	      </m:matrixrow>
      	    <m:matrixrow>
        	  	<m:cn> 1 </m:cn>
          		<m:cn> 1 </m:cn>
          	</m:matrixrow>
     			</m:matrix>
     			
     			</m:apply>
			</m:math>.
</para>
</example>




<example id="example5">
<para id="example5p1">Elementwise operations, part II</para>
<para id="example5p2">
Given a vector x, and a vector y having elements
<m:math>
	<m:apply>
		<m:eq/>
			<m:apply><m:ci>y</m:ci><m:ci>n</m:ci></m:apply>
			<m:apply>
			    <m:divide/>
		      	<m:cn>1</m:cn>
			    	<m:apply><m:sin/><m:apply><m:ci>x</m:ci><m:ci>n</m:ci></m:apply></m:apply>
			</m:apply>
	</m:apply>
</m:math>.

This can be easily be done in MATLAB by typing <code>y=1./sin(x)</code>
Note that using <code>/</code> in place of <code>./</code> would result in the (common) error
<code>Matrix dimensions must agree</code>.
</para>
</example>

</section>


<section id="id31827532">
<title>Complex numbers</title>
<para id="id31827542">MATLAB has excellent support for complex
numbers with several built-in functions available. The imaginary
unit is denoted by <code>i</code> or (as preferred in electrical engineering) <code>j</code>.
To create complex variables 
<m:math>
	<m:apply>
		<m:eq/>
		<m:ci><m:msub><m:mi>z</m:mi><m:mi>1</m:mi></m:msub></m:ci>
		<m:apply>
			<m:plus/>
			<m:cn>7</m:cn>
			<m:imaginaryi/>
		</m:apply> 
	</m:apply>
</m:math>
and

<m:math>
	<m:apply>
		<m:eq/>
		<m:ci><m:msub><m:mi>z</m:mi><m:mi>2</m:mi></m:msub></m:ci>
		<m:apply>
			<m:times/>
			<m:cn>2</m:cn>
			<m:apply>
				<m:power/>
				<m:ci>e</m:ci>
				<m:apply>
					<m:times/>
					<m:imaginaryi/>
					<m:pi/>
				</m:apply>
		</m:apply> 
	</m:apply>
	</m:apply>
</m:math>
simply enter
<code>z1 = 7 + j</code> and <code>z2 = 2*exp(j*pi)</code></para>

<para id="id31827626">The <link target-id="table2">Table</link> below  gives an overview of the basic
functions for manipulating complex numbers, where <m:math><m:ci>z</m:ci></m:math> is a complex number.</para>

	<table frame="all" id="complexNum" summary="">
	  <title>Manipulating complex numbers in MATLAB</title>
	  <tgroup cols="2" align="left" colsep="1" rowsep="1">
	    <colspec colnum="2" colname="c2"/>
	    <colspec colnum="4" colname="c4"/>
	    <thead valign="top">
	      <row>
	        <entry align="center"/>
	        <entry align="center">MATLAB</entry>
	      </row>
	    </thead>
	    <tbody valign="top">
	      <row>
	        <entry align="center">Re(<m:math><m:ci>z</m:ci></m:math>)</entry>
	        <entry align="center"><code>real(z)</code></entry>
	      </row>
	      <row>
	        <entry align="center">Im(<m:math><m:ci>z</m:ci></m:math>)</entry>
	        <entry align="center"><code>imag(z)</code></entry>
	      </row>
	      <row>
	        <entry align="center"><m:math><m:apply><m:abs/><m:ci>z</m:ci></m:apply></m:math></entry>
	        <entry align="center"><code>abs(z)</code></entry>
	      </row>
	      <row>
	        <entry align="center">Angle(<m:math><m:ci>z</m:ci></m:math>)</entry>
	        <entry align="center"><code>angle(z)</code></entry>
	      </row>
	      <row>
	        <entry align="center"><m:math><m:apply><m:power/><m:ci>z</m:ci><m:cn>*</m:cn></m:apply></m:math></entry>
	        <entry align="center"><code>conj(z)</code></entry>
	      </row>
	   </tbody>
	   </tgroup>
	  </table>

</section>
<section id="otherDet">
<title>Other Useful Details</title>
<para id="p1other">
<list list-type="bulleted" id="id11814914"><item>A <emphasis>semicolon</emphasis> added at the end of a line tells MATLAB to suppress
				the command output to the display.</item>
	<item>MATLAB and <emphasis>case sensitivity</emphasis>. For variables MATLAB is case
				sensitive, i.e., b and B are different. For functions it is case insensitive,
				i.e., sum and SUM refer to the same function.</item>
	<item>Often it is useful to <emphasis>split a statement</emphasis> over multiple lines. To split a
				statement across multiple lines, enter three periods <code>"..."</code> at the end of
				the line to indicate that it continues on the next line.</item>
</list>
</para>
<example id="exSplit">
	<para id="exSplitPara">Splitting 
<m:math>
	<m:apply>
		<m:eq/>
		<m:ci>y</m:ci>
		<m:apply>
			<m:plus/>
			 <m:ci>a</m:ci>
			 <m:ci>b</m:ci>
			 <m:ci>c</m:ci>
		</m:apply>
  </m:apply>		
</m:math> over multiple lines.
<code display="block" id="idm1487296">y = a...
+ b...
+ c;</code>
</para>
</example>

</section>
</content>
</document>